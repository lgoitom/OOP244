In this workshop, our central focus revolved around encapsulation. We delved into the process of managing data access within class structures by categorizing them as either public or private members. These functions and variables were an integral part of the Train class, and this arrangement brought some advantages. Notably, it eliminated the need for continually passing arguments to access member variables, streamlining code and enhancing reusability across the entire project.

One particularly valuable aspect was the ability to examine the main file, gaining insights into the values passed as arguments. This practice proved to be helpful in identifying which class members needed to be accessed and leveraged for specific functions which contributes to more efficient and comprehensible code. Encapsulation improves code organization and enhances our ability to build robust and maintainable software systems.

I faced challenges with arithmetic operations not functioning correctly due to many bool functions returning inaccurate values. Despite significant trial and error, I resolved this issue by debugging, meticulously tracking the flow of values, and ensuring the correct Boolean is sent.